// Generated by LiveScript 1.4.0
(function(){
  var backbone;
  backbone = require('./index');
  exports.basicExtend = function(test){
    var A, a;
    A = backbone.Model.extend4000({
      initialize: function(){
        return console.log(1);
      }
    }, {
      initialize: function(){
        return console.log(2);
      }
    }, {
      bla: 666
    });
    a = new A();
    return test.done();
  };
  exports.basicMetaClass = function(test){
    var A, a;
    A = backbone.Model.extend4000({
      initialize: function(){
        return console.log(1);
      }
    }, {
      initialize: function(){
        return console.log(2);
      }
    }, {
      bla: 666
    }, {
      transformers: function(cls){
        cls.prototype.bla *= 2;
        return cls;
      }
    });
    a = new A();
    test.equals(a.bla, 1332);
    return test.done();
  };
  exports.init = function(test){
    var A, B, C, c;
    A = backbone.Model.extend4000({
      initialize: function(it){
        return console.log('initargs', it);
      },
      testf: function(){
        return console.log('testf a1');
      }
    }, {
      initialize: function(){
        return console.log('getbla', this.bla);
      },
      testf: function(){
        return console.log('testf a2');
      }
    });
    B = backbone.Model.extend4000({
      initialize: function(){
        return console.log("VALIDATOR", this.bla, this.get('bla'));
      },
      testf: function(){
        console.log('testf b');
        this._super(1, 2);
        return 3;
      }
    });
    C = A.extend4000(B, {
      bla: 6
    });
    c = new C({
      bla: 666
    });
    console.log(c.testf());
    return test.done();
  };
}).call(this);
