// Generated by LiveScript 1.4.0
(function(){
  var backbone;
  backbone = require('./index');
  exports.basicExtend = function(test){
    var res, A, a;
    res = {};
    A = backbone.Model.extend4000({
      initialize: function(){
        return res.a1 = 1;
      }
    }, {
      initialize: function(){
        return res.a2 = 2;
      }
    }, {
      bla: 666
    });
    a = new A();
    test.deepEqual(res, {
      a1: 1,
      a2: 2
    });
    test.equals(a.bla, 666);
    return test.done();
  };
  exports.metaClass = function(test){
    var res, A, a;
    res = {};
    A = backbone.Model.extend4000({
      initialize: function(){
        return res.a1 = 1;
      }
    }, {
      initialize: function(){
        return res.a2 = 2;
      }
    }, {
      bla: 666
    }, {
      transformers: function(cls){
        cls.prototype.bla *= 2;
        return cls;
      }
    });
    a = new A();
    test.deepEqual(res, {
      a1: 1,
      a2: 2
    });
    test.equals(a.bla, 1332);
    return test.done();
  };
  exports.inherit = function(test){
    var res, A, B, b;
    res = {};
    A = backbone.Model.extend4000({
      initialize: function(){
        return res.a1 = 1;
      }
    });
    B = A.extend4000({
      initialize: function(){
        return res.a2 = 2;
      }
    });
    b = new B();
    test.deepEqual(res, {
      a1: 1,
      a2: 2
    });
    return test.done();
  };
  exports.properSuper = function(test){
    var res, A, B, C, c;
    res = {};
    A = backbone.Model.extend4000({
      initialize: function(it){
        res.a1 = it;
        return res.a1bla = this.bla;
      },
      testf: function(it){
        return res.ta1 = it;
      }
    }, {
      initialize: function(it){
        res.a2 = it;
        return res.a2bla = this.bla;
      },
      testf: function(it){
        return res.ta2 = it;
      }
    });
    B = backbone.Model.extend4000({
      initialize: function(it){
        return res.b1 = it;
      },
      testf: function(it){
        res.tb = it;
        return this._super('testf', 'supercall');
      }
    });
    C = A.extend4000(B, {
      bla: 1
    });
    c = new C({
      bla: 2
    });
    c.testf('hi there');
    test.deepEqual(res, {
      b1: {
        bla: 2
      },
      a1: {
        bla: 2
      },
      a1bla: 1,
      a2: {
        bla: 2
      },
      a2bla: 1,
      tb: 'hi there',
      ta2: 'supercall'
    });
    return test.done();
  };
}).call(this);
