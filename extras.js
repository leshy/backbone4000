// Generated by LiveScript 1.4.0
(function(){
  var _, colors, Backbone, OrderedDict, ChildCollection, CollectionCollection, slice$ = [].slice;
  _ = require('underscore');
  colors = require('colors');
  Backbone = require('./index');
  _.extend(exports, Backbone);
  OrderedDict = exports.OrderedDict = Backbone.Model.extend4000({
    constructor: function(){
      var initValues;
      initValues = slice$.call(arguments);
      return Backbone.Model.apply(this, [void 8].concat(initValues));
    },
    initialize: function(arg$){
      var initValues, this$ = this;
      initValues = slice$.call(arguments, 1);
      this.order = [];
      this.on('change', function(model){
        var this$ = this;
        return _.map(model.changed, function(value, key){
          if (!model._previousAttributes[key]) {
            return this$.order.push(key);
          }
        });
      });
      return _.map(initValues, function(it){
        return this$.set(it);
      });
    },
    map: function(cb){
      var this$ = this;
      return _.map(this.order, function(key){
        return cb(this$.get(key), key);
      });
    }
  });
  ChildCollection = Backbone.Model.extend4000({
    initialize: function(id){
      var this$ = this;
      this.cid = this.id = id;
      this.c = new Backbone.Collection();
      return this.c.on('all', function(){
        return this$.trigger.apply(this$, arguments);
      });
    },
    add: function(){
      var args;
      args = slice$.call(arguments);
      return this.c.add.apply(this.c, args);
    },
    remove: function(){
      var args;
      args = slice$.call(arguments);
      return this.c.remove.apply(this.c, args);
    }
  });
  CollectionCollection = exports.CollectionCollection = Backbone.Collection.extend({
    totalLength: 0,
    add: function(index){
      var models, collection, this$ = this;
      models = slice$.call(arguments, 1);
      if (!(collection = this.get(index))) {
        Backbone.Collection.prototype.add.call(this, collection = new ChildCollection(index));
        this.listenTo(collection, 'add', function(model){
          this$.totalLength++;
          return this$.trigger('childAdd', model, collection);
        });
        this.listenTo(collection, 'remove', function(model){
          this$.totalLength--;
          return this$.trigger('childRemove', model, collection);
        });
      }
      return collection.add(models);
    },
    remove: function(index){
      var models, collection;
      models = slice$.call(arguments, 1);
      if (!(collection = this.get(index))) {
        throw new Error("no collection at " + index);
      }
      collection.remove(models);
      if (!collection.length) {
        Backbone.Collection.prototype.remove.call(this, collection, {
          silent: true
        });
        this.stopListening(collection);
        return this.trigger('remove', collection);
      }
    }
  });
}).call(this);
