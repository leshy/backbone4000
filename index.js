// Generated by LiveScript 1.4.0
(function(){
  var ref$, map, fold1, keys, values, first, flatten, _, h, Backbone, metaExtender, extender, slice$ = [].slice;
  ref$ = require('prelude-ls'), map = ref$.map, fold1 = ref$.fold1, keys = ref$.keys, values = ref$.values, first = ref$.first, flatten = ref$.flatten;
  _ = require('underscore');
  h = require('helpers');
  Backbone = require('./jspart');
  Backbone.Model.extend4000 = Backbone.View.extend4000 = Backbone.Collection.extend4000 = function(){
    var classes, newClass, this$ = this;
    classes = slice$.call(arguments);
    _.map(h.push(this.extenders, _.pluck(classes, 'extenders')), function(extender){
      return h.pushm(classes, extender(classes));
    });
    newClass = h.uextend(classes);
    newClass = h.uextend(newClass, {
      metaClass: h.push(newClass.metaClass, this.prototype.metaClass)
    });
    newClass = _.reduce(newClass.metaClass || [], function(newClass, morpher){
      return morpher(newClass, this$);
    }, newClass);
    return this.extend(newClass);
  };
  metaExtender = exports.metaExtender = {};
  metaExtender.mergeAttribute = curry$(function(validate, join, name){
    return function(classes){
      var joinedAttribute, ret;
      joinedAttribute = _.reduce(classes, function(joined, cls){
        var attr;
        if (cls.prototype) {
          cls = cls.prototype;
        }
        attr = cls[name];
        if (!validate || validate(attr)) {
          if (joined) {
            return join(joined, attr);
          } else {
            return attr;
          }
        } else {
          return joined;
        }
      }, void 8);
      if (joinedAttribute) {
        ret = {};
        ret[name] = joinedAttribute;
        return ret;
      } else {}
    };
  });
  metaExtender.chainF = metaExtender.mergeAttribute(function(f){
    return (f != null ? f.constructor : void 8) === Function;
  }, function(f1, f2){
    return compose$(f1, f2);
  });
  metaExtender.mergeDict = metaExtender.mergeAttribute(function(d){
    return (d != null ? d.constructor : void 8) === Object;
  }, function(d1, d2){
    console.log('merging!', d1, d2);
    return _.extend({}, d1, d2);
  });
  metaExtender.mergeDictDeep = metaExtender.mergeAttribute(function(d){
    return (d != null ? d.constructor : void 8) === Object;
  }, function(d1, d2){
    return h.extend(d1, d2);
  });
  extender = exports.extender = {};
  extender.initialize = metaExtender.chainF('initialize');
  extender.defaults = metaExtender.mergeDict('defaults');
  extender.deepDefaults = metaExtender.mergeDictDeep('defaults');
  Backbone.Model.extenders = [extender.initialize, extender.defaults];
  _.extend(exports, Backbone);
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
